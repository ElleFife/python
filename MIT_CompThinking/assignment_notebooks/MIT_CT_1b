{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MIT_CT_1b","provenance":[],"authorship_tag":"ABX9TyN2iadV2GlVprlVGSErhhT0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"s7XAL931J5Me"},"source":["Problem set 1b"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cFAYtN8pJ3NG","executionInfo":{"status":"ok","timestamp":1617562604424,"user_tz":360,"elapsed":465,"user":{"displayName":"Lauren 'Lorny' Pfeifer","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GirlMlVQfg1aP-_AcDejlveS4lDzZv0NCE9I-m6rbY=s64","userId":"10134286804564555933"}},"outputId":"408121bd-8095-4bd2-9241-a10fe5688ebf"},"source":["# Problem 1\n","def dp_make_weight(egg_weights, target_weight, memo = {}):\n","    \"\"\"\n","    Find number of eggs to bring back, using the smallest number of eggs. Assumes there is\n","    an infinite supply of eggs of each weight, and there is always a egg of value 1.\n","    \n","    Parameters:\n","    egg_weights - tuple of integers, available egg weights sorted from smallest to largest value (1 = d1 < d2 < ... < dk)\n","    target_weight - int, amount of weight we want to find eggs to fit\n","    memo - dictionary, OPTIONAL parameter for memoization (you may not need to use this parameter depending on your implementation)\n","    \n","    Returns: int, smallest number of eggs needed to make target weight\n","    \"\"\"\n","    # TODO: Your code here\n","    if weight_in_egg_weights(target_weight, egg_weights):\n","        return 1\n","\n","    for  weight in range(1, target_weight +1):\n","\n","        if weight_in_egg_weights(weight, egg_weights):\n","            memo[weight] = 1\n","            continue\n","\n","        qty_eggs = weight\n","        for egg in egg_weights:\n","            if egg > weight:\n","                continue\n","            if memo[weight - egg] + 1 < qty_eggs:\n","                qty_eggs = memo[weight - egg] + 1\n","            memo[weight] = qty_eggs\n","\n","    return memo[target_weight]\n","\n","def weight_in_egg_weights(weight, egg_weights):\n","    if weight in egg_weights:\n","        return True\n","    else: return False\n","\n","\n","# EXAMPLE TESTING CODE, feel free to add more if you'd like\n","if __name__ == '__main__':\n","    egg_weights = (1, 5, 10, 25)\n","    n = 99\n","    print(\"Egg weights = (1, 5, 10, 25)\")\n","    print(\"n = 99\")\n","    print(\"Expected ouput: 9 (3 * 25 + 2 * 10 + 4 * 1 = 99)\")\n","    print(\"Actual output:\", dp_make_weight(egg_weights, n))\n","    print(\"\\n\")\n","\n","    egg_weights = (1, 5, 10, 25)\n","    n = 10 \n","    print(\"Egg weights = (1, 5, 10, 25)\")\n","    print(\"n = 10\")\n","    print(\"Expected ouput: 1\")\n","    print(\"Actual output:\", dp_make_weight(egg_weights, n))\n","    print(\"\\n\")\n","\n","    egg_weights = (1, 5, 10, 25)\n","    n = 54 \n","    print(\"Egg weights = (1, 5, 10, 25)\")\n","    print(\"n = 54\")\n","    print(\"Expected ouput: 4\")\n","    print(\"Actual output:\", dp_make_weight(egg_weights, n))\n","    print(\"\\n\")"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Egg weights = (1, 5, 10, 25)\n","n = 99\n","Expected ouput: 9 (3 * 25 + 2 * 10 + 4 * 1 = 99)\n","Actual output: 9\n","\n","\n","Egg weights = (1, 5, 10, 25)\n","n = 10\n","Expected ouput: 1\n","Actual output: 1\n","\n","\n","Egg weights = (1, 5, 10, 25)\n","n = 54\n","Expected ouput: 4\n","Actual output: 6\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HobZmZkFL92g"},"source":[""],"execution_count":null,"outputs":[]}]}